package DropBoxTag;
import java.util.*;
/**
 * @leetcode https://leetcode.com/problems/minimize-malware-spread/
 * @Time 8 m * n
 * @Space 1
 */
public class MinimizeMalwareSpread {
    public void gameOfLife(int[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return;
        }
        int rows = board.length;
        int cols = board[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int totalLive = numOfLive(board, i, j);
                if (board[i][j] == 1) {
                    if (totalLive < 2 || totalLive > 3) {
                        board[i][j] = 2;
                    }
                } else {
                    if (totalLive == 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                board[i][j] = board[i][j] % 2;
            }
        }
    }
    private int numOfLive(int[][]board, int row, int col) {
        int totalLive = 0;
        int[] dx = new int[] {0, 0, -1, 1, -1, -1, 1, 1};
        int[] dy = new int[] {-1, 1, 0, 0, -1, 1, -1, 1};
        for (int i = 0; i < 8; i++) {
            int currRow = row + dx[i];
            int currCol = col + dy[i];
            if (isValid(board, currRow, currCol) &&
                    (board[currRow][currCol] == 1 || board[currRow][currCol] == 2)) {
                totalLive++;
            }
        }
        return totalLive;
    }
    private boolean isValid(int[][] board, int currRow, int currCol) {
        int rows = board.length;
        int cols = board[0].length;
        return currRow >= 0 && currRow < rows &&
                currCol >= 0 && currCol < cols;
    }
}
